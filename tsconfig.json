{
	"compilerOptions": {
		"baseUrl": "./",
		/* 基本选项 */
		"target": "esnext", // 指定 ECMAScript 目标版本: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', or 'ESNEXT'
		"module": "ES6", // 指定生成哪个模块系统代码： "None"， "CommonJS"， "AMD"， "System"， "UMD"， "ES6"或 "ES2015"。
		"lib": ["dom", "es2017"], // 用于指定编译过程中要包含的库文件。这些库文件是TypeScript提供的一组声明文件，用于描述JavaScript运行环境的API。这允许TypeScript知道某些全局变量或全局类型的存在，从而在不实际执行代码的情况下进行类型检查，"dom"：包含了浏览器环境中的所有DOM（文档对象模型）的类型定义，如 document 或 window。"es6"：包含了ECMAScript 2015（也称为ES6）的类型定义，如 Promise, Set, Map 等。"node"：为Node.js环境提供类型定义。
		"checkJs": true, // 报告 javascript 文件中的错误, 必须配合allowJs使用
		"jsx": "react-jsx", // "react": 将 JSX 转换为 React.createElement 调用，适用于 React 16 及之前的版本。"react-jsx": 使用新的 JSX 转换，适用于 React 17 及之后的版本，不需要导入 React。"react-jsxdev": 在开发模式下使用新的 JSX 转换，它包含额外的调试信息。"preserve": 保留 JSX 语法，后续可以通过 Babel 等工具进行转换
		"declaration": true, // 生成相应的 '.d.ts' 文件
		"sourceMap": true, // 生成相应的 '.map' 文件
		"resolveJsonModule": true, // 允许导入 JSON 模块
		"removeComments": false, // 删除编译后的所有的注释
		"allowJs": true, // 允许编译 JavaScript 文件
		"skipLibCheck": true, // 跳过库文件的类型检查
		"esModuleInterop": true, // 启用 ES6 模块规范的交互行为
		"noEmit": false, // 不生成输出文件
		"importHelpers": true, // 从 tslib 导入辅助工具函数
		"forceConsistentCasingInFileNames": true, // 禁止对同一个文件的不一致的大小写引用
		"isolatedModules": true, // 将每个文件做为单独的模块 （与 'ts.transpileModule' 类似）.
		/* 严格的类型检查选项 */
		"strict": true, // 启用所有严格类型检查选项
		"alwaysStrict": true, // 以严格模式检查每个模块，并在每个文件里加入 'use strict'
		"noImplicitAny": false, // 在表达式和声明上有隐含的'any'类型时报错。
		"strictNullChecks": true, // 在严格的 null检查模式下， null和 undefined值不包含在任何类型里，只允许用它们自己和 any来赋值（有个例外， undefined可以赋值到 void）
		"noImplicitThis": true, // 当 this 表达式值为 any 类型的时候，生成一个错误
		/* 额外的检查 */
		"noUnusedLocals": true, // 若有未使用的局部变量则抛错。
		"noUnusedParameters": true, // 若有未使用的参数则抛错
		"noImplicitReturns": true, // 并不是所有函数里的代码都有返回值时，抛出错误
		"noFallthroughCasesInSwitch": true, // 报告switch语句的fallthrough错误。（即，不允许switch的case语句贯穿）
		/* 模块解析选项 */
		"moduleResolution": "node", // 决定如何处理模块。或者是"Node"对于Node.js/io.js，或者是"Classic"（默认）。查看模块解析了解详情。
		"allowSyntheticDefaultImports": true, // 允许从没有设置默认导出的模块中默认导入。这并不影响代码的输出，仅为了类型检查。
		"inlineSourceMap": false, // 生成单个 soucemaps 文件，而不是将 sourcemaps 生成不同的文件
		/* 其他选项 */
		"experimentalDecorators": true, // 启用装饰器
		"emitDecoratorMetadata": true // 为装饰器提供元数据的支持
	},
	"exclude": [
		//  "files"指定一个包含相对或绝对文件路径的列表。 "include"和"exclude"属性指定一个文件glob匹配模式列表
		"dist",
		"node_modules"
	],
	"include": ["./src/**/*.ts", "./src/**/*.tsx", "./global.d.ts"], // 指定客户端代码的位置
	"compileOnSave": true // 让IDE在保存文件的时候根据tsconfig.json重新生成文件
}
